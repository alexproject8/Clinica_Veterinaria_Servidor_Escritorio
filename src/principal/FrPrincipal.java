/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import beans.Cita;
import beans.CitaDate;
import beans.Cliente;
import beans.HistorialClinico;
import beans.Mascota;
import com.google.gson.Gson;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.exception.DataException;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

/**
 *
 * @author Alex
 */
public class FrPrincipal extends javax.swing.JFrame implements Runnable {

    //creo el hilo, el serversocket, el socket y los input y output si instanciarlo
    Thread mihilo;
    ServerSocket servidor = null;
    Socket ss = null;

    ObjectInputStream inObj;
    ObjectOutputStream outObj;

    DataInputStream in;
    DataOutputStream out;
    //instancion un arrayList donde guardar los usuarios/jugadores que estén conectados
    ArrayList usuariosConectados = new ArrayList();
    OperacionesHibernate oh = new OperacionesHibernate();

    /**
     * Creates new form FrPrincipal
     */
    public FrPrincipal() {
        setTitle("Servidor - Clínica veterinaria");
        try {
            setIconImage(ImageIO.read(getClass().getResource("/recursos/logotipo.png")));
        } catch (IOException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

        centrarVentana();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConectar = new javax.swing.JButton();
        barraEstado = new javax.swing.JPanel();
        lblEstado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        btnConectar.setText("CONECTAR");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        barraEstado.setBackground(new java.awt.Color(204, 0, 0));

        lblEstado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEstado.setForeground(new java.awt.Color(255, 255, 255));
        lblEstado.setText("SERVIDOR APAGADO");

        javax.swing.GroupLayout barraEstadoLayout = new javax.swing.GroupLayout(barraEstado);
        barraEstado.setLayout(barraEstadoLayout);
        barraEstadoLayout.setHorizontalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEstado)
                .addContainerGap(321, Short.MAX_VALUE))
        );
        barraEstadoLayout.setVerticalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraEstadoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblEstado))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(barraEstado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        btnConectar.setEnabled(false);
        //al pulsar en conectar se pondrá la barra en verdey cambiará el texto a activo
        barraEstado.setBackground(Color.green);
        lblEstado.setText("SERVIDOR ACTIVO");

        //instancio e inicio el hilo para posteriormete hacer la conexion socket
        mihilo = new Thread(this);
        mihilo.start();
    }//GEN-LAST:event_btnConectarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barraEstado;
    private javax.swing.JButton btnConectar;
    private javax.swing.JLabel lblEstado;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {

        try {
            //instancio el serversocket con el puerto 9999
            servidor = new ServerSocket(9999);

            while (true) {

                //elimina el archivo que se crea de historial ya que no interesa que esté en al parte servidor
                int num = leerParaEliminarHistorial();
                File archivo = new File("historial-" + (num - 1) + ".pdf");
                if (archivo.exists()) {
                    archivo.delete();
                }

                //elimina el archivo que se crea de factura ya que no interesa que esté en al parte servidor
                int num2 = leerParaEliminarFactura();
                File archivo2 = new File("factura-" + (num2 - 1) + ".pdf");
                if (archivo2.exists()) {
                    archivo2.delete();
                }

                //acepta la peticion del cliente
                ss = servidor.accept();

                in = new DataInputStream(ss.getInputStream());
                out = new DataOutputStream(ss.getOutputStream());
                String mensaje = in.readUTF();
                System.out.println(mensaje);

                //__________________ CONDICIONES PARA APP ESCRITORIO _____________________________________________
                //Si empieza con * es para iniciar sesión
                if (mensaje.indexOf("*") == 0) {

                    compruebaVeterinarioInicioSesion(mensaje);

                } else if (mensaje.indexOf(",") == 0) {

                    altaMascota(mensaje);

                } //Para rellenar combobox tratamiento
                else if (mensaje.equals("rellenarcomboboxtratamiento")) {

                    rellenaComboTratamiento();

                } //Para rellenar combobox veterinario
                else if (mensaje.equals("rellenarcomboboxveterinario")) {

                    rellenaComboVeterinario();

                } //Para guardar cliente
                else if (mensaje.equals("guardarcliente")) {

                    guardarCliente();

                } //Para guardar historial
                else if (mensaje.equals("guardarhistorial")) {

                    guardarHistorial();

                } else if (mensaje.equals("listamascota")) {

                    listarMascotas();

                } //filtro mascota por clientes
                else if (mensaje.indexOf("ç") == 0) {

                    filtroMascotasPorCliente(mensaje);

                } //filtro cliente por nombre
                else if (mensaje.indexOf("-") == 0) {

                    filtroClientesPorNombre(mensaje);

                } //filtro cliente por apellidos
                else if (mensaje.indexOf("_") == 0) {

                    filtroClientesPorApellidos(mensaje);

                } //filtro cliente por poblacion
                else if (mensaje.indexOf(";") == 0) {

                    filtroClientesPorPoblacion(mensaje);

                } //filtro cliente por dados de baja
                else if (mensaje.equals("baja")) {

                    filtroClientesPorBaja();

                } //devuelve id de veterinario
                else if (mensaje.indexOf("\\") == 0) {

                    devuelveIdVeterinario(mensaje);

                } //dar de baja a una mascota o paciente
                else if (mensaje.indexOf("/") == 0) {

                    bajaMascota(mensaje);

                } //dar de baja a un cliente
                else if (mensaje.indexOf("'") == 0) {

                    bajaCliente(mensaje);

                } //filtro listado completo clientes
                else if (mensaje.equals("listaclientes")) {

                    listadoClientes();

                } //devuelve listado completo de citas
                else if (mensaje.equals("listacitas")) {

                    listarCitas();

                } //devuelve listado completo de historial
                else if (mensaje.indexOf("[") == 0) {

                    listarHistorial(mensaje);

                }//modificar cliente
                else if (mensaje.equals("modificarcliente")) {

                    modificarCliente();

                    //modificar fecha de una cita   
                } else if (mensaje.indexOf("&") == 0) {

                    modificarFechaCita(mensaje);

                    //anular/eliminar una cita
                } else if (mensaje.indexOf("=") == 0) {
                    anularCita(mensaje);

                    //modificar clave veterinario
                } else if (mensaje.indexOf("%") == 0) {
                    modificaClaveVeterinario(mensaje);

                    //gennerar informe historial
                } else if (mensaje.indexOf("$") == 0) {

                    generarInformeHistorial(mensaje);

                    //genera una factura completa
                } else if (mensaje.indexOf("@") == 0) {

                    generarFactura(mensaje);

                    //genera una factura de una fecha determinada
                } else if (mensaje.indexOf("(") == 0) {

                    generarFacturaFecha(mensaje);

                    //pagar de historial
                } else if (mensaje.indexOf("¿") == 0) {

                    pagar(mensaje);

                } //__________________ CONDICIONES PARA APP MÓVIL ________________________________________________                
                //alta o modificar cita desde móvil
                else if (mensaje.indexOf(".") == 0) {

                    altaModificarCita(mensaje);

                } //muestar lista de citas por cliente móvil
                else if (mensaje.equals("listacitasmovil")) {

                    listarCitasMovil();

                } //muestar lista de citas horas
                else if (mensaje.equals("listacitashorasmovil")) {

                    listarCitasCompletaMovil();

                } //acceso cliente movil
                else if (mensaje.indexOf(">") == 0) {

                    inicioSesionCliente(mensaje);

                } //modificar clave cliente movil
                else if (mensaje.indexOf("<") == 0) {

                    modificaClaveCliente(mensaje);

                } //devuelve idcliente
                else if (mensaje.indexOf("^") == 0) {

                    devuelveIdCliente(mensaje);

                }//eliminar cita
                else if (mensaje.indexOf("¡") == 0) {

                    eliminaCita(mensaje);

                }//devuelve nombre de mascota
                else if (mensaje.indexOf("!") == 0) {

                    devuelveNombreMascota(mensaje);

                } //devuelve las mascotas de un cliente
                else if (mensaje.indexOf("}") == 0) {

                    devuelveMascota(mensaje);

                }
            }

        } catch (IOException | ClassNotFoundException | DataException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //********************************************************
    //****************** MËTODOS *****************************
    //********************************************************
    //**************** MËTODOS PARA CLIENTE APLICACIÓN ESCRITORIO *************************************************
    //--------------- Método para buscar ID y clave para iniciar sesión ----------
    public void compruebaVeterinarioInicioSesion(String mensaje) throws IOException {
        boolean existe = false;
        String id = mensaje.substring(1, mensaje.indexOf('-'));
        String clave = mensaje.substring(mensaje.indexOf('-') + 1);

        existe = OperacionesHibernate.busquedaVeterinario(Integer.parseInt(id), clave);
        out.writeBoolean(existe);
    }

    //------------ Método para el alta de la mascota ------------
    public void altaMascota(String mensaje) throws IOException, ClassNotFoundException {

        int idcliente = OperacionesHibernate.busquedaCliente(mensaje.substring(1));

        out.writeInt(idcliente);

        if (idcliente != -1) {

            //instancia los DataInputStream y DataOutputStream
            inObj = new ObjectInputStream(ss.getInputStream());

            Mascota m = (Mascota) inObj.readObject();
            OperacionesHibernate.altaMascota(m);
            inObj.close();
        }

    }

    //--------- Método para rellenar el comobox de tratamientos -------------
    public void rellenaComboTratamiento() throws IOException {

        List<String> lista = OperacionesHibernate.devuelveTratamiento();

        out.writeInt(lista.size());

        for (int i = 0; i < lista.size(); i++) {
            out.writeUTF(lista.get(i));
        }

    }

    //--------- Método para rellenar el comobox de veterinarios -------------
    public void rellenaComboVeterinario() throws IOException {
        List<String> lista = OperacionesHibernate.devuelveVeterinario();

        out.writeInt(lista.size());

        for (int i = 0; i < lista.size(); i++) {
            out.writeUTF(lista.get(i));
        }
    }

    //---------- Método para guardar cliente ------------------
    public void guardarCliente() throws IOException, ClassNotFoundException {
        //instancia los DataInputStream y DataOutputStream
        inObj = new ObjectInputStream(ss.getInputStream());

        //Guardar cliente
        Cliente c = (Cliente) inObj.readObject();

        int id = OperacionesHibernate.busquedaCliente(c.getDni());

        if (id == -1) {
            OperacionesHibernate.altaCliente(c);
            out.writeInt(id);
        } else {
            out.writeInt(id);
        }
        inObj.close();
    }

    //---------- Método para guardar historial ------------------
    public void guardarHistorial() throws IOException, ClassNotFoundException {
        //instancia los DataInputStream y DataOutputStream
        inObj = new ObjectInputStream(ss.getInputStream());

        //Guardar ibject historial
        HistorialClinico hc = (HistorialClinico) inObj.readObject();

        OperacionesHibernate.altaHistorial(hc);

        inObj.close();
    }

    //------------ Método para listar las mascotas -------------
    public void listarMascotas() throws IOException {
        List<Mascota> lista = OperacionesHibernate.devuelveMascota();

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }

    //---------- Método para el filtrado de mascotas por cliente ------------
    public void filtroMascotasPorCliente(String mensaje) throws IOException {
        System.out.println(mensaje.substring(1));
        List<Mascota> lista = OperacionesHibernate.devuelveMascota(mensaje.substring(1));
        System.out.println(mensaje.substring(1));
        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }

    //------------ Método para filtrar clientes por nombre -----------------
    public void filtroClientesPorNombre(String mensaje) throws IOException {
        List<Cliente> lista = OperacionesHibernate.devuelveCliente(mensaje.substring(1));

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }

    //------------ Método para filtrar clientes por apellidos -----------------
    public void filtroClientesPorApellidos(String mensaje) throws IOException {
        List<Cliente> lista = OperacionesHibernate.devuelveClienteApellidos(mensaje.substring(1));

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }

    //-------------------- Método para filtrar clientes por población -------------
    public void filtroClientesPorPoblacion(String mensaje) throws IOException {
        List<Cliente> lista = OperacionesHibernate.devuelveClientePoblacion(mensaje.substring(1));

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }
//------------ Método para filtrar clientes por baja --------------

    public void filtroClientesPorBaja() throws IOException {
        List<Cliente> lista = OperacionesHibernate.devuelveClienteBaja();

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        outObj.close();
        out.close();
        in.close();
    }

    //---------- Método para devolver ID del veterinario ------------------
    public void devuelveIdVeterinario(String mensaje) throws IOException {
        System.out.println(mensaje.substring(1));
        int id = OperacionesHibernate.devuelveIdVeterinario(mensaje.substring(1));

        out.writeInt(id);

        out.close();
        in.close();
    }

    //--------------- Método para listar clientes -------------
    public void listadoClientes() throws IOException {
        List<Cliente> lista = OperacionesHibernate.devuelveCliente();

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        out.close();
        in.close();
        outObj.close();
    }

    //--------------- Método para eliminar una mascota --------------
    public void bajaMascota(String mensaje) throws IOException {
        //Borrado en cascada de mascota, citas e historial

        OperacionesHibernate.eliminarCitaMascota(Integer.parseInt(mensaje.substring(1)));
        OperacionesHibernate.eliminarHistorial(Integer.parseInt(mensaje.substring(1)));
        OperacionesHibernate.bajaMascota(Integer.parseInt(mensaje.substring(1)));

        out.close();
        in.close();
    }

    //--------------- Método para poner en baja a un cliente --------------
    public void bajaCliente(String mensaje) throws IOException {

        OperacionesHibernate.bajaCliente(mensaje.substring(1, mensaje.indexOf("+")), mensaje.substring(mensaje.indexOf("+") + 1));
        out.close();
        in.close();
    }

    //--------------- Método para devolver lista de citas -------------
    public void listarCitas() throws IOException {
        List<Cita> lista = OperacionesHibernate.devuelveCitas();

        out.writeInt(lista.size());

        //instancia los DataInputStream y DataOutputStream
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            //out.writeUTF(oh.devuelveHora(lista.get(i).getHora()));
            outObj.writeObject(lista.get(i));
        }

        out.close();
        in.close();
        outObj.close();
    }

    //------------ Método para listar historial por mascota ---------------
    public void listarHistorial(String mensaje) throws IOException {

        List<HistorialClinico> lista = OperacionesHibernate.listaHistorialPorMascota(Integer.parseInt(mensaje.substring(1)));

        out.writeInt(lista.size());

        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }

        in.close();
        out.close();
        outObj.close();
    }

    //------------ Método para modificar un cliente ---------------
    public void modificarCliente() throws IOException, ClassNotFoundException {
        inObj = new ObjectInputStream(ss.getInputStream());
        Cliente c = (Cliente) inObj.readObject();

        OperacionesHibernate.modificarCliente(c);

        inObj.close();
        in.close();
        out.close();
    }

    //------------ Método para modificar la fecha de una cita ---------------
    public void modificarFechaCita(String mensaje) throws IOException {
        if (!OperacionesHibernate.comrpuebaCitas(mensaje.substring(mensaje.indexOf("+") + 1))) {

            OperacionesHibernate.modificarFechaCita(mensaje.substring(1, mensaje.indexOf('+')), mensaje.substring(mensaje.indexOf("+") + 1));
            out.writeBoolean(true);

        } else {
            out.writeBoolean(false);
        }
        in.close();
        out.close();
    }

    public void anularCita(String mensaje) throws IOException {
        OperacionesHibernate.eliminarCita(Integer.parseInt(mensaje.substring(1)));

        in.close();
        out.close();
    }

    //------------- Método para modificar clave de veterinario ---------------------------
    public void modificaClaveVeterinario(String mensaje) throws IOException {
        boolean existe = false;
        existe = OperacionesHibernate.busquedaVeterinario(Integer.parseInt(mensaje.substring(1, mensaje.indexOf("-"))), mensaje.substring(mensaje.indexOf("-") + 1, mensaje.indexOf("+")), mensaje.substring(mensaje.indexOf("+") + 1));

        out.writeBoolean(existe);

        out.close();
        in.close();
    }

    //------------- Método para generar informe del historial ---------------------
    public void generarInformeHistorial(String mensaje) {
        try {
            //Inicio conexión con BBDD para pasar la conexión al JasperReport
            SessionFactory sessionFactory;

            Configuration configuration = new Configuration();
            configuration.configure();
            ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();
            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
            Session session = sessionFactory.openSession();

            SessionImplementor sessionImpl = (SessionImplementor) session;
            java.sql.Connection conexion = sessionImpl.connection();

            JasperReport reporte = null;
            InputStream path = getClass().getResourceAsStream("/recursos/informeHistorial.jasper");
            //reporte = (JasperReport) JRLoader.loadObjectFromFile(path);

            //incremento del numero que lee y graba en un fichero
            int num = leerNumeroHistorial();

            Map parametros = new HashMap<String, Object>();
            parametros.put("idmascota", Integer.parseInt(mensaje.substring(1)));

            JasperPrint jprint = JasperFillManager.fillReport(path, parametros, conexion);
            JasperExportManager.exportReportToPdfFile(jprint, "historial-" + num + ".pdf");
            File archivo = new File("historial-" + num + ".pdf");

            //paso del archivo a bytes
            byte[] archivoByte = Files.readAllBytes(archivo.toPath());

            //envío el archivo al cliente, como no quiero los archivos sin datos compruebo
            //que el archivo tenga mas 999 bytes lo que quiere decir que contiene datos
            if (archivoByte.length > 999) {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF(archivo.toString());

                outObj = new ObjectOutputStream(ss.getOutputStream());
                outObj.writeObject(archivoByte);

            } else {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF("");

            }
            outObj.close();
            out.close();

        } catch (JRException | IOException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //------------- Método para generar una factura ---------------------
    public void generarFactura(String mensaje) {

        try {
            //Inicio conexión con BBDD para pasar la conexión al JasperReport
            SessionFactory sessionFactory;

            Configuration configuration = new Configuration();
            configuration.configure();
            ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();
            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
            Session session = sessionFactory.openSession();

            SessionImplementor sessionImpl = (SessionImplementor) session;
            java.sql.Connection conexion = sessionImpl.connection();

            JasperReport reporte = null;
            InputStream path = getClass().getResourceAsStream("/recursos/informeFactura.jasper");
            //reporte = (JasperReport) JRLoader.loadObjectFromFile(path);

            //incremento del numero que lee y graba en un fichero
            int num = leerNumeroFactura();

            Map parametros = new HashMap<String, Object>();
            parametros.put("idcliente", Integer.parseInt(mensaje.substring(1, mensaje.indexOf("+"))));
            parametros.put("empresa", mensaje.substring(mensaje.indexOf("+") + 1, mensaje.indexOf("-")));
            parametros.put("direccion", mensaje.substring(mensaje.indexOf("-") + 1, mensaje.indexOf(",")));
            parametros.put("ciudad", mensaje.substring(mensaje.indexOf(",") + 1, mensaje.indexOf(".")));
            parametros.put("telefono", mensaje.substring(mensaje.indexOf(".") + 1));
            parametros.put("fecha", new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
            parametros.put("numFactura", num);

            JasperPrint jprint = JasperFillManager.fillReport(path, parametros, conexion);
            JasperExportManager.exportReportToPdfFile(jprint, "factura-" + num + ".pdf");
            File archivo = new File("factura-" + num + ".pdf");
            //Desktop.getDesktop().open(ruta);

            //paso del archivo a bytes
            byte[] archivoByte = Files.readAllBytes(archivo.toPath());

            //envío el archivo al cliente, como no quiero los archivos sin datos compruebo
            //que el archivo tenga mas 999 bytes lo que quiere decir que contiene datos
            if (archivoByte.length > 999) {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF(archivo.toString());

                outObj = new ObjectOutputStream(ss.getOutputStream());
                outObj.writeObject(archivoByte);

            } else {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF("");

            }
            outObj.close();
            out.close();

        } catch (JRException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //------------- Método para generar una factura por fecha ---------------------
    public void generarFacturaFecha(String mensaje) {
        try {
            //Inicio conexión con BBDD para pasar la conexión al JasperReport
            SessionFactory sessionFactory;

            Configuration configuration = new Configuration();
            configuration.configure();
            ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();
            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
            Session session = sessionFactory.openSession();

            SessionImplementor sessionImpl = (SessionImplementor) session;
            java.sql.Connection conexion = sessionImpl.connection();

            JasperReport reporte = null;
            InputStream path = getClass().getResourceAsStream("/recursos/informeFacturaMes.jasper");
            //reporte = (JasperReport) JRLoader.loadObjectFromFile(path);

            inObj = new ObjectInputStream(ss.getInputStream());
            Date d = (Date) inObj.readObject();
            System.out.println(d.toString());

            int num = leerNumeroFactura();
            //creo un hashmap mapa y le paso los parámentros
            Map parametros = new HashMap<String, Object>();
            parametros.put("idcliente", Integer.parseInt(mensaje.substring(1, mensaje.indexOf("+"))));
            parametros.put("empresa", mensaje.substring(mensaje.indexOf("+") + 1, mensaje.indexOf("-")));
            parametros.put("direccion", mensaje.substring(mensaje.indexOf("-") + 1, mensaje.indexOf(",")));
            parametros.put("ciudad", mensaje.substring(mensaje.indexOf(",") + 1, mensaje.indexOf(".")));
            parametros.put("telefono", mensaje.substring(mensaje.indexOf(".") + 1));
            parametros.put("fecha", new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
            parametros.put("numFactura", num);
            parametros.put("mes", d);

            JasperPrint jprint = JasperFillManager.fillReport(path, parametros, conexion);
            JasperExportManager.exportReportToPdfFile(jprint, "factura-" + num + ".pdf");
            File archivo = new File("factura-" + num + ".pdf");
            //Desktop.getDesktop().open(ruta);

            //paso del archivo a bytes
            byte[] archivoByte = Files.readAllBytes(archivo.toPath());

            //envío el archivo al cliente, como no quiero los archivos sin datos compruebo
            //que el archivo tenga mas 999 bytes lo que quiere decir que contiene datos
            if (archivoByte.length > 999) {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF(archivo.toString());

                outObj = new ObjectOutputStream(ss.getOutputStream());
                outObj.writeObject(archivoByte);

            } else {
                out = new DataOutputStream(ss.getOutputStream());
                out.writeUTF("");

            }
            outObj.close();
            out.close();

        } catch (JRException | IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //---------------------- Metodo para leer del fichero -----------------
    public int leerNumeroFactura() {
        FileReader f = null;
        String cadena = "0";
        int numeroFactura = 0;
        File archivo = new File("/recursos/numero_factura.txt");
        if (archivo.exists()) {
            try {

                f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                cadena = b.readLine();
                b.close();

                numeroFactura = escribirNumeroFactura(Integer.parseInt(cadena));

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    f.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            numeroFactura = escribirNumeroFactura(1);
        }
        return numeroFactura;
    }

    //---------------------- Metodo para escribir en el fichero -----------------
    public int escribirNumeroFactura(int numeroFactura) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("/recursos/numero_factura.txt");
            pw = new PrintWriter(fichero);

            pw.println(++numeroFactura);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

        return --numeroFactura;
    }

    //---------------------- Metodo para leer del fichero -----------------
    public int leerParaEliminarFactura() {
        FileReader f = null;
        String cadena = "0";
        File archivo = new File("/recursos/numero_factura.txt");
        if (archivo.exists()) {
            try {

                f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                cadena = b.readLine();
                b.close();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    f.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return Integer.parseInt(cadena);
    }

    //---------------------- Metodo para leer del fichero -----------------
    public int leerNumeroHistorial() {
        FileReader f = null;
        String cadena = "0";
        int numeroHistorial = 0;
        File archivo = new File("/recursos/numero_historial.txt");
        if (archivo.exists()) {
            try {

                f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                cadena = b.readLine();
                b.close();

                numeroHistorial = escribirNumeroHistorial(Integer.parseInt(cadena));

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    f.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            numeroHistorial = escribirNumeroHistorial(1);
        }
        return numeroHistorial;
    }

    //---------------------- Metodo para escribir en el fichero -----------------
    public int escribirNumeroHistorial(int numeroHistorial) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("/recursos/numero_historial.txt");
            pw = new PrintWriter(fichero);

            pw.println(++numeroHistorial);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

        return --numeroHistorial;
    }

    //---------------------- Metodo para leer del fichero -----------------
    public int leerParaEliminarHistorial() {
        FileReader f = null;
        String cadena = "0";
        File archivo = new File("/recursos/numero_historial.txt");
        if (archivo.exists()) {
            try {

                f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                cadena = b.readLine();
                b.close();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    f.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return Integer.parseInt(cadena);
    }

    //---------------------- Metodo para poner linea de historial como pagada -----------------
    public void pagar(String mensaje) throws IOException {
        OperacionesHibernate.pagarHistorial(mensaje.substring(1, mensaje.indexOf("+")));

        List<HistorialClinico> lista = OperacionesHibernate.listaHistorialPorMascota(Integer.parseInt(mensaje.substring(mensaje.indexOf("+") + 1)));

        out.writeInt(lista.size());
        outObj = new ObjectOutputStream(ss.getOutputStream());

        for (int i = 0; i < lista.size(); i++) {
            outObj.writeObject(lista.get(i));
        }
        outObj.close();
        out.close();
    }

//**************** MËTODOS PARA CLIENTE APLICACIÓN MÓVIL *********************************************************
//---------------- Método para dar de alta citas o para modificarlas ----------------
    public void altaModificarCita(String mensaje) throws IOException {
        //uso JSon ya que los datos vendrá en este formato ya que al intentar pasar un objeto desde android da
        //problemas de reconocimiento de clases
        Gson gson = new Gson();
        CitaDate c = gson.fromJson(mensaje.substring(1, mensaje.indexOf("+")), CitaDate.class);

        int idmascota = OperacionesHibernate.devuelveIdMascota(mensaje.substring(mensaje.indexOf("+") + 1, mensaje.indexOf("?")), c.getIdcliente());

        c.setIdmascota(idmascota);

        //si el idcita es mayor a 0 quiere se modifica la cita de lo contrario se da de alta a la cita
        if (Integer.parseInt(mensaje.substring(mensaje.indexOf("?") + 1)) > 0) {
            OperacionesHibernate.modificarCita(c, Integer.parseInt(mensaje.substring(mensaje.indexOf("?") + 1)));
        } else {
            out.writeInt(OperacionesHibernate.altaCita(c));
        }

        out.close();

        in.close();
    }

//-------------- Método para listar citas por cliente en app móvil ----------------
    public void listarCitasMovil() throws IOException {
        int id = in.readInt();

        List<Cita> lista = OperacionesHibernate.devuelveCitas(id);

        out.writeInt(lista.size());

        Gson gson = new Gson();

        for (int i = 0; i < lista.size(); i++) {
            CitaDate c = new CitaDate(lista.get(i).getIdcita(), lista.get(i).getMotivo(), lista.get(i).getFecha().getTime(), lista.get(i).getIdcliente(), lista.get(i).getIdmascota());
            out.writeUTF(gson.toJson(c));
        }

        out.close();
        in.close();
    }

    //------------- Métodos para lista completa de citas -------------------
    public void listarCitasCompletaMovil() throws IOException {
        List<Cita> lista = OperacionesHibernate.devuelveCitas();

        out.writeInt(lista.size());

        Gson gson = new Gson();

        for (int i = 0; i < lista.size(); i++) {
            CitaDate c = new CitaDate(lista.get(i).getIdcita(), lista.get(i).getMotivo(), lista.get(i).getFecha().getTime(), lista.get(i).getIdcliente(), lista.get(i).getIdmascota());
            System.out.println(c.toString());
            out.writeUTF(gson.toJson(c));
        }

        out.close();
        in.close();
    }

    //------------ Método para inicio de sesión cliente ------------------
    public void inicioSesionCliente(String mensaje) throws IOException {
        boolean existe = false;
        existe = OperacionesHibernate.busquedaCliente(Integer.parseInt(mensaje.substring(1, mensaje.indexOf("-"))), mensaje.substring(mensaje.indexOf("-") + 1));

        out.writeBoolean(existe);

        out.close();
        in.close();
    }

    //------------- Método para modificar clave de cliente ---------------------------
    public void modificaClaveCliente(String mensaje) throws IOException {
        boolean existe = false;
        existe = OperacionesHibernate.busquedaCliente(Integer.parseInt(mensaje.substring(1, mensaje.indexOf("-"))), mensaje.substring(mensaje.indexOf("-") + 1, mensaje.indexOf("+")), mensaje.substring(mensaje.indexOf("+") + 1));

        out.writeBoolean(existe);

        out.close();
        in.close();
    }

    //------------ Método para devolver idcliente ------------------------
    public void devuelveIdCliente(String mensaje) throws IOException {
        int id = OperacionesHibernate.busquedaCliente(mensaje.substring(1));

        out.writeInt(id);

        out.close();
        in.close();
    }

    //---------- Método para eliminar cita ----------------------------
    public void eliminaCita(String mensaje) throws IOException {
        OperacionesHibernate.eliminarCita(Integer.parseInt(mensaje.substring(1)));
        out.close();
        in.close();
    }

    //-------------- Método para devolver nombre de mascota ------------------
    public void devuelveNombreMascota(String mensaje) throws IOException {
        List<Mascota> lista = OperacionesHibernate.devuelveMascota();
        int id = Integer.parseInt(mensaje.substring(1));

        for (int i = 0; i < lista.size(); i++) {

            if (lista.get(i).getIdmascota() == id) {
                out.writeUTF(lista.get(i).getNombre());
                break;
            }
        }
        out.close();
        in.close();
    }

    private void devuelveMascota(String mensaje) throws IOException {
        List<Mascota> lista = OperacionesHibernate.devuelveMascota(Integer.parseInt(mensaje.substring(1)));

        out.writeInt(lista.size());
        for (int i = 0; i < lista.size(); i++) {

            out.writeUTF(lista.get(i).getNombre());

        }
        out.close();
        in.close();
    }

    //----------------- Método para centrar el JFrame (la ventana) -------------------
    public void centrarVentana() {
        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        System.out.println("ancho=" + ancho + " alto=" + alto + " ancho=" + this.getWidth() + " alto=" + this.getHeight());
        setLocation(ancho / 2 - getWidth() / 2, alto / 2 - getHeight() / 2);
    }

}
